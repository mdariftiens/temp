SELECT rtrim( xmlagg(xmlelement(e,NVL (odt.id, NULL),',').extract('//text()') order by NVL (odt.id, NULL)).getclobval() ,',') AS odt_ids, rtrim( xmlagg(xmlelement(e,NVL (odt.invoice_id, NULL),',').extract('//text()') order by NVL (odt.invoice_id, NULL)).getclobval() ,',') AS invoice_ids, rtrim( xmlagg(xmlelement(e,NVL (odt.int_reset_date, NULL),',').extract('//text()') order by NVL (odt.int_reset_date, NULL)).getclobval() ,',') AS int_reset_dates, rtrim( xmlagg(xmlelement(e,NVL (odt.penal_reset_date, NULL),',').extract('//text()') order by NVL (odt.penal_reset_date, NULL)).getclobval() ,',') AS penal_reset_dates, rtrim( xmlagg(xmlelement(e,NVL (odi."DATE", NULL),',').extract('//text()') order by NVL (odi."DATE", NULL)).getclobval() ,',') AS odi_date, rtrim( xmlagg(xmlelement(e,NVL (od.id, NULL),',').extract('//text()') order by NVL (od.id, NULL)).getclobval() ,',') AS od_ids, rtrim( xmlagg(xmlelement(e,NVL (odi.daily_interest, NULL),',').extract('//text()') order by NVL (odi.daily_interest, NULL)).getclobval() ,',') AS interest_balance_details, rtrim( xmlagg(xmlelement(e,NVL (odi.penal_interest, NULL),',').extract('//text()') order by NVL (odi.penal_interest, NULL)).getclobval() ,',') AS penal_interest_details, rtrim( xmlagg(xmlelement(e,NVL (odt.payment_request_id, NULL),',').extract('//text()') order by NVL (odt.payment_request_id, NULL)).getclobval() ,',') AS payment_request_ids, rtrim( xmlagg(xmlelement(e,NVL (odt.discounting_id, NULL),',').extract('//text()') order by NVL (odt.discounting_id, NULL)).getclobval() ,',') AS discount_ids, MAX (cd.is_npa) AS is_npa, MAX (b.id) AS bank_id, MAX (TO_CHAR (b.configurations)) AS bank_configurations, MAX (cbc.id) AS credit_to_id, MAX (cbcp.id) AS credit_penal_to_id, MAX (cb.id) AS debit_from_id, MAX (br.code) AS branch_code, SUM (odi.daily_interest) AS interest_sum, SUM (odi.penal_interest) AS penal_sum, SUM (NVL (odt.interest_balance, 0)) odt_interest_balance, SUM (NVL (odt.penal_interest, 0)) odt_penal_interest, CASE WHEN JSON_VALUE ( b.configurations, '$.basic_configuration.dis_interest_account_branch_specific') =1 THEN br.code ||'~'||cb.account_no ELSE cb.account_no END AS debit_int_from, CASE WHEN JSON_VALUE ( b.configurations, '$.basic_configuration.dis_penal_interest_recievable_account_branch_specific') = 1 THEN br.code ||'~'||cbp.account_no ELSE cbp.account_no END As debit_penal_from, CASE WHEN cd.is_npa = 1 THEN CASE WHEN JSON_VALUE ( b.configurations, '$.basic_configuration.unrealised_int_acc_branch_specific') = 1 THEN br.code ||'~'||cbc.account_no ELSE cbc.account_no END ELSE CASE WHEN JSON_VALUE ( b.configurations, '$.basic_configuration.dis_earned_interest_account_branch_specific') = 1 THEN br.code ||'~'||cbc.account_no ELSE cbc.account_no END END AS credit_int_to, CASE WHEN cd.is_npa = 1 THEN CASE WHEN JSON_VALUE ( b.configurations, '$.basic_configuration.unrealised_int_acc_branch_specific') = 1 THEN br.code ||'~'||cbcp.account_no ELSE cbcp.account_no END ELSE CASE WHEN JSON_VALUE ( b.configurations, '$.basic_configuration.dis_penal_interest_account_branch_specific') = 1 THEN br.code ||'~'||cbcp.account_no ELSE cbcp.account_no END END AS credit_penal_to, CASE WHEN JSON_VALUE (b.configurations, '$.basic_configuration.round_off_repayments') IS NOT NULL THEN CAST ( JSON_VALUE ( b.configurations, '$.basic_configuration.round_off_repayments') AS DECIMAL (4, 2)) ELSE 0 END AS min_amount FROM OD_DAILY_INTEREST odi LEFT JOIN OD_TRANSACTIONS odt ON ODI.OD_TRANSACTION_ID = ODT.ID LEFT JOIN PAYMENT_REQUESTS pr ON ODT.PAYMENT_REQUEST_ID = PR.ID LEFT JOIN DISCOUNTINGS d ON PR.DISCOUNT_ID = D.ID LEFT JOIN OD_ACCOUNTS od ON ODT.OD_ACCOUNT_ID = OD.ID LEFT JOIN COMPANIES cd ON OD.DISTRIBUTOR_ID = CD.ID LEFT JOIN BRANCHES br ON CD.BRANCH_ID = BR.ID LEFT JOIN BANKS b ON OD.BANK_ID = B.ID LEFT JOIN COMPANY_BANKS cb ON JSON_VALUE (b.configurations, '$.basic_configuration.dis_interest_account') = CB.ID LEFT JOIN COMPANY_BANKS cbp ON JSON_VALUE ( b.configurations, '$.basic_configuration.dis_penal_interest_recievable_account') = CBP.ID LEFT JOIN COMPANY_BANKS cbc ON (CASE WHEN cd.is_npa = 1 THEN JSON_VALUE ( b.configurations, '$.basic_configuration.unrealised_int_acc') ELSE JSON_VALUE ( b.configurations, '$.basic_configuration.dis_earned_interest_account') END) = CBC.ID LEFT JOIN COMPANY_BANKS cbcp ON (CASE WHEN cd.is_npa = 1 THEN JSON_VALUE ( b.configurations, '$.basic_configuration.unrealised_int_acc') ELSE JSON_VALUE ( b.configurations, '$.basic_configuration.dis_penal_interest_account') END) = CBCP.ID WHERE (d.status = 7 OR odt.credit_type_id = -1 OR odt.credit_type_id = 2 OR odt.credit_type_id = -2) and (odi."DATE") = to_date('2023-09-19','yyyy-mm-dd') and odt.last_cron_accrual_date < to_date('2023-09-19','yyyy-mm-dd') AND ( odt.balance > 0 OR odt.interest_balance > 0 OR odt.penal_interest > 0) GROUP BY CASE WHEN JSON_VALUE (b.configurations,'$.basic_configuration.dis_interest_account_branch_specific') =1 THEN br.code ||'~'||cb.account_no ELSE cb.account_no END, CASE WHEN cd.is_npa = 1 THEN CASE WHEN JSON_VALUE (b.configurations,'$.basic_configuration.unrealised_int_acc_branch_specific') = 1 THEN br.code ||'~'||cbc.account_no ELSE cbc.account_no END ELSE CASE WHEN JSON_VALUE (b.configurations, '$.basic_configuration.dis_earned_interest_account_branch_specific') =1 THEN br.code ||'~'||cbc.account_no ELSE cbc.account_no END END, CASE WHEN JSON_VALUE (b.configurations,'$.basic_configuration.dis_penal_interest_recievable_account_branch_specific') =1 THEN br.code ||'~'||cbp.account_no ELSE cbp.account_no END, CASE WHEN cd.is_npa = 1 THEN CASE WHEN JSON_VALUE ( b.configurations, '$.basic_configuration.unrealised_int_acc_branch_specific') = 1 THEN br.code ||'~'||cbcp.account_no ELSE cbcp.account_no END ELSE CASE WHEN JSON_VALUE ( b.configurations, '$.basic_configuration.dis_penal_interest_account_branch_specific') = 1 THEN br.code ||'~'||cbcp.account_no ELSE cbcp.account_no END END, CASE WHEN JSON_VALUE (b.configurations,'$.basic_configuration.round_off_repayments')IS NOT NULL THEN CAST (JSON_VALUE (b.configurations,'$.basic_configuration.round_off_repayments') AS DECIMAL (4, 2)) ELSE 0 END
